1、如何判断是否为字符串类型
function checkString(value){
  //简单类型判断typeof，高级判断new String()的实例是一个对象
  return typeof value === 'string' || Object.prototype.toString.call(value) === '[object String]'
}

2、CSS预编译
css预编译器，是基于css语言的，能够让css也能有一种编程语言范，从而，解决了css难以解决的问题，如css模块化、无法嵌套书写、没有变量。
作用是将css里的表达式，函数，变量，循环，判断这些浏览器不认识的代码，还原为浏览器认识的CSS标准发给浏览器解析.
如Sass

3、iframe的优缺点，跨域
优点：
iframe能够原封不动的把嵌入的网页展现出来。
如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。
网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。
如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。
缺点：
iframe会阻塞主页面的onload事件；
iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。，会产生很多页面，不容易管理。
iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差。
代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理iframe中的内容，所以使用iframe会不利于搜索引擎优化（SEO）。
很多的移动设备无法完全显示框架，设备兼容性差。
iframe框架页面会增加服务器的http请求，对于大型网站是不可取的。
怎么解决iframe跨域？
  1）.片段识别符（指的是，URL的#号后面的部分，如http://example.com/x.html#fragment的#fragment）
  2）.window.name（该网页将信息写入window.name属性，indow.name = data）
  3）.跨文档通信 API（window.postMessage('信息内容','接收消息的窗口的源（origin）')）
  参考：http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html
  
4、css伪类
1）.动态伪类：：hover   ：link   :visited   :active
2）.状态伪类：:enabled,:disabled,:checked,:target
3）.:nth选择器：
    :first-child选择某个元素的第一个子元素；
    :last-child选择某个元素的最后一个子元素；
    :nth-child()选择某个元素的一个或多个特定的子元素；
    :nth-child(2) 选择第二个  :nth-child(n) n从0开始0的时候取不到元素的，  :nth-child(2n)==:nth-child(even) 
    :nth-child(n+5)  选取的5往后的子元素        :nth-child(-n+5)  选取的5往前的子元素       
    :nth-last-child()选择某个元素的一个或多个特定的子元素，从这个元素的最后一个子元素开始算；
    :nth-of-type()选择指定的元素；
    :nth-last-of-type()选择指定的元素，从元素的最后一个开始计算；
    :first-of-type选择一个上级元素下的第一个同类子元素；
    :last-of-type选择一个上级元素的最后一个同类子元素；
    :only-child选择的元素是它的父元素的唯一一个了元素；
    :only-of-type选择一个元素是它的上级元素的唯一一个相同类型的子元素；
    :empty选择的元素里面没有任何内容
4）.否定选择器（:not）
5）.伪元素：::first-letter,::first-line,::before,::after，::selection

4、Ajax的基本原理
Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发送异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面

5、websocket浏览器兼容性
websocket不兼容IE浏览器，但是兼容Edge浏览器

6、使用 Cookie 的优点与缺点
优点：
  1）.Cookie易于使用和实现：实现cookie的使用要比任何其他Internet协议容易得多。
  2）.占用更少的内存：不需要任何服务器资源，并存储在用户的计算机上，因此不会给服务器带来额外的负担。
  3）.持久性：Cookie最强大的一个方面就是持久性。当在客户端的浏览器上设置Cookie时，它可以持续数天，数月甚至数年。这样可以轻松保存用户首选项和访问信息，并在用户每次返回站点时保持此信息可用。此外，由于Cookie存储在客户端的硬盘上，因此如果服务器崩溃，它们仍然可用。
  4）.透明性：Cookie透明地工作，用户不知道需要存储的信息。
  5）.易于管理
    大多数浏览器都可以让用户轻松清除浏览历史记录。只需转到工具，清除历史记录并选择Cookie即可。
    Cookie存储在用户硬盘驱动器上的cookie.txt下的文本文件中，因为它是一个文本文件，我们可以使用任何查看器或文本编辑器来显示，编辑和删除它们。
  缺点:
    1）.隐私问题
       大多数用户主要关心的是隐私。启用Cookie的Web浏览器会跟踪您访问过的所有网站。这意味着，经许可（或不在Google的情况下），第三方可以访问这些cookie存储的信息。在某些情况下，这些第三方可以是广告商，其他用户。。。。
    2）.不安全
      Cookie安全性是一个大问题，因为它们是以明文形式存储，可能会造成安全风险，因为任何人都可以打开并篡改cookie。
      Cookie容易在客户端被发现意味着它们很容易被黑客入侵和修改。
    3）.难以解密：我们可以手动加密和解密cookie，但由于加密和解密所需的时间，它需要额外的编码并影响应用程序性能。
    4）.大小有限制，只能储存简单字符串信息
      cookie文本的大小（一般为4kb），cookie的数量（一般每个站点20个）存在一些限制，每个站点只能容纳20个cookie。
      Cookie仅限于简单的字符串信息，他们无法存储复杂的信息。
    5）.可以被禁用
      用户可以选择从浏览器设置中禁用其计算机上的cookie。这意味着用户可以决定不在他的浏览器上使用cookie，这可能会在浏览器的运行中产生一些问题。
    6）.可以被删除：用户可以从其计算机中删除cookie，这使他们可以更好地控制cookie。
    
 7、null和undefined有何区别？
    null表示"没有对象"，即该处不应该有值。
      用法：
      （1） 作为函数的参数，表示该函数的参数不是对象。
      （2） 作为对象原型链的终点
    undefined表示"缺少值"，就是此处应该有一个值，但是还没有定义。
      用法：
      （1）变量被声明了，但没有赋值时，就等于undefined。
      （2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。
      （3）对象没有赋值的属性，该属性的值为undefined。
      （4）函数没有返回值时，默认返回undefined。
    null是一个表示"无"的对象，转为数值时为0；undefined是一个表示"无"的原始值，转为数值时为NaN。
    Number(undefined) // NaN
    Number(null) // 0
    if(undefined) if(null) //false
    
8、AMD CMD的作用
    这些规范的目的都是为了 JavaScript 的模块化开发，目前这些规范的实现都能达成浏览器端模块化开发的目的。
    主要解决两个问题，"命名冲突"、"文件依赖"
9、如何懒加载图片？
  原理：先将img标签的src链接设为同一张图片（比如空白图片，或者1px*1px的小图片），然后给img标签设置自定义属性（比如 data-src）,
       然后将真正的图片地址存储在data-src中，当JS监听到该图片元素进入可视窗口时，将自定义属性中的地址存储到src属性中。达到懒加载的效果
  目的：这样做能防止页面一次性向服务器发送大量请求，导致服务器响应面，页面卡顿崩溃等
10、闭包的作用
    1）.可以读取到其他函数内部的局部变量 
    2）.可以将变量保存在内存中
    定义在一个函数内部的函数，将函数内部和函数外部连接起来的一座桥梁（能够读取其他函数内部变量的函数）
    例如：实现定时器
      function count(){
          var i=0;
          return function () {
              return ++i;
          }
      }  //调用count函数，虽然每次调用同一个函数，但创建的栈是不同的，因此栈内的局部变量是不同的；计数器就会每次自增1并返回
    【注意】：1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。
            2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。
            3）不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）
     立即执行函数
     function count(){
          var i=0;
          for(;i<100;i++){
            (function () {
                console.log(i)
            })()
          }
      }
11、如何获取所以的input元素
   getElementsByTagName('input') //参数tag name 只能是tag标签 'p'
   querySelectorAll('input') //参数css selector 可以是tag标签，还可以是类，id选择器 'p' '.line' '#app'
   getElementsByTagName比querySelectorAll快的原因是因为动态和静态NodeList的区别，
   动态的NodeList返回的更快是因为只需要返回一个指针，而静态的需要获取这个节点的所有信息
12、jsonp的作用
    解决AJAX请求跨域问题，通过发送script，只支持GET请求
    JSONP是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。
    它的基本思想是，网页通过添加一个<script>元素，向服务器请求JSON数据，这种做法不受同源政策限制；
    服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。
      如：'http://example.com/ip?callback=foo'   //foo为服务器收到请求后返回的回调函数
    其他解决AJAX请求跨域的方法：
      1）.WebSocket
        设置请求的头信息Origin字段，表示该请求的请求源（origin）
        因为服务器可以根据这个字段，判断是否许可本次通信。如果该域名在白名单内，服务器就会做出回应。
      2）.CORS跨源资源分享 支持所有类型的HTTP请求
        在头信息之中，增加一个Origin字段，指定请求的源
          如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段：
          Access-Control-Allow-Origin: http://api.bob.com //表示接受xxx域名的请求 
          Access-Control-Allow-Credentials: true          //表示是否允许发送Cookie
          Access-Control-Expose-Headers: FooBar           //
        CORS请求发送Cookie和HTTP认证信息时
          要在AJAX请求中打开withCredentials属性
          要在服务器指定Access-Control-Allow-Credentials字段
     参考：http://www.ruanyifeng.com/blog/2016/04/cors.html
          http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html
      
